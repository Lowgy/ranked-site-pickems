// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                    String     @id @default(uuid())
  name                  String
  email                 String?    @unique
  emailVerified         DateTime?   @map("email_verified")
  image                 String?
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt
  accounts              Account[]
  sessions              Session[]
  minecraftUUID         String?
  picks Pick[]
  role                  String?   @default("USER")
  @@map("users")
}

model Account {
  id                 String    @id @default(cuid())
  userId              String    @map("user_id")
  type                String?
  provider           String
  providerAccountId  String    @map("provider_account_id")
  token_type         String?
  refresh_token      String?   @db.Text
  access_token       String?   @db.Text
  expires_at         Int?
  scope              String?
  id_token           String? @db.Text
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  userId       String?  @map("user_id")
  sessionToken String   @db.Text @map("session_token") @unique
  accessToken  String?  @db.Text @map("access_token")
  expires      DateTime
  user         User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("sessions")
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Pick {
  id Int @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id])
  userId String
  winner String
  matchId Int @unique
  matchDetails Match @relation(fields: [matchId], references: [id])
}

model Participant {
  id Int @id @default(autoincrement())
  name String @unique
  uuid String
  seedNumber Int
  matches Match[]
}

model Match {
  id Int @id @default(autoincrement())
  matchID String @unique
  name String
  season Int
  nextMatchId Int?
  startTime Int?
  state MatchState?
  participants Participant[]
  winner String?
  picks Pick[]
}

enum MatchState {
  DONE
  SCHEDULED
  ACTIVE
}